[{"path":"/articles/arrangeGrob.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Arranging multiple grobs on a page","text":"example mix grobs plots,","code":"library(gridExtra) library(grid) library(ggplot2) library(lattice) p <- qplot(1,1) p2 <- xyplot(1~1) r <- rectGrob(gp=gpar(fill=\"grey90\")) t <- textGrob(\"text\") grid.arrange(t, p, p2, r, ncol=2)"},{"path":"/articles/arrangeGrob.html","id":"title-andor-annotations","dir":"Articles","previous_headings":"","what":"Title and/or annotations","title":"Arranging multiple grobs on a page","text":"","code":"gs <- lapply(1:9, function(ii)    grobTree(rectGrob(gp=gpar(fill=ii, alpha=0.5)), textGrob(ii))) grid.arrange(grobs=gs, ncol=4,                 top=\"top label\", bottom=\"bottom\\nlabel\",                 left=\"left label\", right=\"right label\") grid.rect(gp=gpar(fill=NA))"},{"path":"/articles/arrangeGrob.html","id":"complex-layouts","dir":"Articles","previous_headings":"","what":"Complex layouts","title":"Arranging multiple grobs on a page","text":"can provide matrix defining layout,  layout may contain holes, note given grob index region must simply connected (hole),  cells equal size default, users may pass explicity widths /heights valid grid units, relative numbers (interpreted null),","code":"lay <- rbind(c(1,1,1,2,3),              c(1,1,1,4,5),              c(6,7,8,9,9)) grid.arrange(grobs = gs, layout_matrix = lay) hlay <- rbind(c(1,1,NA,2,3),               c(1,1,NA,4,NA),               c(NA,7,8,9,NA)) select_grobs <- function(lay) {   id <- unique(c(t(lay)))    id[!is.na(id)] }  grid.arrange(grobs=gs[select_grobs(hlay)], layout_matrix=hlay) grid.arrange(grobs=gs[1:3], ncol=2, widths = 1:2,               heights=unit(c(1,10), c(\"in\", \"mm\")))"},{"path":"/articles/arrangeGrob.html","id":"nested-layouts-with-arrangegrob","dir":"Articles","previous_headings":"","what":"Nested layouts with arrangeGrob","title":"Arranging multiple grobs on a page","text":"grid.arrange() function draws device; complex layouts, may want store gtable combine objects, e.g. forming nested layouts. end, use arrangeGrob(),","code":"g1 <- arrangeGrob(grobs = gs, layout_matrix = t(lay)) g2 <- arrangeGrob(grobs = gs, layout_matrix = lay) grid.arrange(g1, g2, ncol=2)"},{"path":"/articles/arrangeGrob.html","id":"multiple-pages-output","dir":"Articles","previous_headings":"","what":"Multiple pages output","title":"Arranging multiple grobs on a page","text":"Finally, may want place grobs multiple pages; marrangeGrob() function provides convenient interface , also compatible ggsave().","code":"set.seed(123) pl <- lapply(1:11, function(.x)               qplot(1:10, rnorm(10), main=paste(\"plot\", .x))) ml <- marrangeGrob(pl, nrow=2, ncol=2) ## non-interactive use, multipage pdf ## ggsave(\"multipage.pdf\", ml) ## interactive use; calling `dev.new` multiple times ml"},{"path":"/articles/gtable.html","id":"constructing-a-gtable","dir":"Articles","previous_headings":"","what":"Constructing a gtable","title":"(Unofficial) overview of gtable","text":"gtable object can constructed variety ways, Empty table empty table 3 rows one column. gtable_col gtable_row provide simplified interface 1 column 1 row layouts, respectively. matrix layout grobs Actual drawing gtable graphics device performed grid.draw(); note plot() defined debugging purposes, adds light grey background thin grid lines help visualise scene drawing context.   gridExtra package provides conventient constructor functions, e.g. based grid.arrange  pre-defined layout","code":"gtable(unit(1:3, c(\"cm\")), unit(5, \"cm\")) a <- rectGrob(gp = gpar(fill = \"red\")) b <- grobTree(rectGrob(), textGrob(\"new\\ncell\")) c <- ggplotGrob(qplot(1:10,1:10)) d <- linesGrob() mat <- matrix(list(a, b, c, d), nrow = 2) g <- gtable_matrix(name = \"demo\", grobs = mat,                     widths = unit(c(2, 4), \"cm\"),                     heights = unit(c(2, 5), c(\"in\", \"lines\"))) g ## TableGrob (2 x 2) \"demo\": 4 grobs ##   z     cells name                 grob ## 1 1 (1-1,1-1) demo    rect[GRID.rect.1] ## 2 2 (2-2,1-1) demo  gTree[GRID.gTree.2] ## 3 3 (1-1,2-2) demo       gtable[layout] ## 4 4 (2-2,2-2) demo lines[GRID.lines.44] plot(g) grid.newpage() grid.draw(g) dummy_grob <- function(id)  {   grobTree(rectGrob(gp=gpar(fill=id, alpha=0.5)), textGrob(id)) } gs <- lapply(1:9, dummy_grob) grid.arrange(ncol=4, grobs=gs,                 top=\"top\\nlabel\", bottom=\"bottom\\nlabel\",                 left=\"left\\nlabel\", right=\"right\\nlabel\") grid.rect(gp=gpar(fill=NA)) gt <- arrangeGrob(grobs=gs, layout_matrix=rbind(c(1,1,1,2,3),                                            c(1,1,1,4,5),                                            c(6,7,8,9,9))) grid.draw(gt) grid.rect(gp=gpar(fill=NA))"},{"path":"/articles/gtable.html","id":"components-of-a-gtable","dir":"Articles","previous_headings":"","what":"Components of a gtable","title":"(Unofficial) overview of gtable","text":"Let’s closer look gtable created earlier. useful characteristics gtable , note dual nature gtable: looks like matrix, sense defines rectangular table nrow x ncol cells, ’s also list arbitrary length, defining many grobs placed tabular layout. important components , grobs: list grobs length(g). Grobs placed tabular layout defined gtable, multiple grobs can overlap /stacked cell(s). layout: data.frame indicating position grob. z-column used define drawing order grobs, becomes relevant multiple grobs stacked top others. * widths heights: size description cells, given grid units.","code":"print(g) ## TableGrob (2 x 2) \"demo\": 4 grobs ##   z     cells name                 grob ## 1 1 (1-1,1-1) demo    rect[GRID.rect.1] ## 2 2 (2-2,1-1) demo  gTree[GRID.gTree.2] ## 3 3 (1-1,2-2) demo       gtable[layout] ## 4 4 (2-2,2-2) demo lines[GRID.lines.44] names(g) ##  [1] \"grobs\"         \"layout\"        \"widths\"        \"heights\"       ##  [5] \"respect\"       \"rownames\"      \"colnames\"      \"name\"          ##  [9] \"gp\"            \"vp\"            \"children\"      \"childrenOrder\" length(g); nrow(g); ncol(g) ## [1] 4 ## [1] 2 ## [1] 2 length(g$grobs) ## [1] 4 g$layout ##   t l b r z clip name ## 1 1 1 1 1 1   on demo ## 2 2 1 2 1 2   on demo ## 3 1 2 1 2 3   on demo ## 4 2 2 2 2 4   on demo g$widths; g$heights ## [1] 2cm 4cm ## [1] 2inches 5lines"},{"path":"/articles/gtable.html","id":"modifying-a-gtable","dir":"Articles","previous_headings":"","what":"Modifying a gtable","title":"(Unofficial) overview of gtable","text":"gtable package defines several high-level functions operate gtable object, t.gtable transpose layout (future versions may support general rotations) [.gtable*, gtable_filter, gtable_trim extract portion gtable cbind.gtable*, rbind.gtable* combine 2 gtable objects (particularly useful aligning multiple ggplots) gtable_add_cols, gtable_add_rows,gtable_add_col_space, gtable_add_row_space, gtable_add_padding, gtable_col_spacer, gtable_row_spacer Manual operations low-level gtable can involve grobs layout, care taken keep two consistent (e.g. make sure length sync).","code":""},{"path":"/articles/gtable.html","id":"examples-to-alter-ggplot2-plots-with-gtable","dir":"Articles","previous_headings":"Modifying a gtable","what":"Examples to alter ggplot2 plots with gtable","title":"(Unofficial) overview of gtable","text":"gtable tag Stack Overlfow several real-life examples using gtable alter ggplot2 drawing. aligning (multiple) ggplot objects device, another use-case scenario, aligning base plot ggplot adding new grobs aligned plot panel, also one calculate device size based plot aspect ratio add new axes facet_grid layout, second axis","code":""},{"path":"/articles/ngonGrob.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Regular polygons and ellipses in grid graphics","text":"","code":"library(gridExtra) library(grid) library(grid) N <- 5 xy <- polygon_regular(N)*2  # draw multiple polygons g <- ngonGrob(unit(xy[,1],\"cm\") + unit(0.5,\"npc\"),               unit(xy[,2],\"cm\") + unit(0.5,\"npc\"),               n=seq_len(N)+2, gp=gpar(fill=1:N))  grid.newpage() grid.draw(g)"},{"path":"/articles/ngonGrob.html","id":"rotated-and-stretched-polygons","dir":"Articles","previous_headings":"","what":"Rotated and stretched polygons","title":"Regular polygons and ellipses in grid graphics","text":"","code":"g2 <- ngonGrob(unit(xy[,1],\"cm\") + unit(0.5,\"npc\"),               unit(xy[,2],\"cm\") + unit(0.5,\"npc\"),               n=seq_len(N)+2, ar=seq_len(N),               phase=0, angle=pi/(seq_len(N)+2),               size=1:N+5, gp=gpar(fill=1:N))  grid.newpage() grid.draw(g2)"},{"path":"/articles/ngonGrob.html","id":"ellipses","dir":"Articles","previous_headings":"","what":"Ellipses","title":"Regular polygons and ellipses in grid graphics","text":"","code":"g3 <- ellipseGrob(unit(xy[,1],\"cm\") + unit(0.5,\"npc\"),                   unit(xy[,2],\"cm\") + unit(0.5,\"npc\"),                   angle=-2*seq(0,N-1)*pi/N+pi/2,                   size=5, ar=3, gp=gpar(fill=1:N))  grid.newpage() grid.draw(g3)"},{"path":"/articles/tableGrob.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Displaying tables as grid graphics","text":"","code":"library(gridExtra) library(grid) d <- head(iris[,1:3]) grid.table(d)"},{"path":"/articles/tableGrob.html","id":"spacing","dir":"Articles","previous_headings":"","what":"Spacing","title":"Displaying tables as grid graphics","text":"spacing row/column automatic, adjust bigger cell contents. Plotmath notation may used, parse=TRUE argument. Note applied individual strings text, reverts standard text parsing fails (useful mixing multiline text plotmath different cells).","code":"d[2,3] <- \"this is very wwwwwide\" d[1,2] <- \"this\\nis\\ntall\" colnames(d) <- c(\"alpha*integral(xdx,a,infinity)\",                  \"this text\\nis high\", 'alpha/beta')  tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE))) grid.table(d, theme=tt)"},{"path":"/articles/tableGrob.html","id":"aesthetic-formatting","dir":"Articles","previous_headings":"","what":"Aesthetic formatting","title":"Displaying tables as grid graphics","text":"formatting controlled themes, nested lists graphical parameters. See ttheme_default ttheme_minimal two built-examples. Changing parameters time amounts modifying list new values.  formatting values fewer number cells, recycled along columns,","code":"tt1 <- ttheme_default() tt2 <- ttheme_minimal() tt3 <- ttheme_minimal(   core=list(bg_params = list(fill = blues9[1:4], col=NA),             fg_params=list(fontface=3)),   colhead=list(fg_params=list(col=\"navyblue\", fontface=4L)),   rowhead=list(fg_params=list(col=\"orange\", fontface=3L)))  grid.arrange(   tableGrob(iris[1:4, 1:2], theme=tt1),   tableGrob(iris[1:4, 1:2], theme=tt2),   tableGrob(iris[1:4, 1:2], theme=tt3),   nrow=1) t1 <- ttheme_default(core=list(         fg_params=list(fontface=c(rep(\"plain\", 4), \"bold.italic\")),         bg_params = list(fill=c(rep(c(\"grey95\", \"grey90\"),                                     length.out=4), \"#6BAED6\"),                          alpha = rep(c(1,0.5), each=5))         ))  grid.table(iris[1:5, 1:3], theme = t1)"},{"path":"/articles/tableGrob.html","id":"text-justification","dir":"Articles","previous_headings":"","what":"Text justification","title":"Displaying tables as grid graphics","text":"text labels can justified; default “centre” core header, “right” row names. settings can adjusted passing relevant parameters textGrob via theme nested lists,","code":"tt1 <- ttheme_default() tt2 <- ttheme_default(core=list(fg_params=list(hjust=1, x=0.9)),                       rowhead=list(fg_params=list(hjust=1, x=0.95))) tt3 <- ttheme_default(core=list(fg_params=list(hjust=0, x=0.1)),                       rowhead=list(fg_params=list(hjust=0, x=0))) grid.arrange(   tableGrob(mtcars[1:4, 1:2], theme=tt1),   tableGrob(mtcars[1:4, 1:2], theme=tt2),   tableGrob(mtcars[1:4, 1:2], theme=tt3),   nrow=1)"},{"path":"/articles/tableGrob.html","id":"further-gtable-processing-and-integration","dir":"Articles","previous_headings":"","what":"Further gtable processing and integration","title":"Displaying tables as grid graphics","text":"based gtable, table can processed. particular, may edit cell sizes align content page.  alignment several tables can achieved combine function (adapted gtable:::join),","code":"g <- g2 <- tableGrob(iris[1:4, 1:3], cols = NULL, rows=NULL) g2$widths <- unit(rep(1/ncol(g2), ncol(g2)), \"npc\") grid.arrange(rectGrob(), rectGrob(), nrow=1) grid.arrange(g, g2, nrow=1, newpage = FALSE) d1 <- PlantGrowth[1:3,1, drop=FALSE] d2 <- PlantGrowth[1:2,1:2]  g1 <- tableGrob(d1) g2 <- tableGrob(d2)  haligned <- gtable_combine(g1,g2, along=1) valigned <- gtable_combine(g1,g2, along=2) grid.newpage() grid.arrange(haligned, valigned, ncol=2)"},{"path":"/articles/tableGrob.html","id":"borders-and-separators","dir":"Articles","previous_headings":"Further gtable processing and integration","what":"Borders and separators","title":"Displaying tables as grid graphics","text":"grobs separating lines rectangles (borders, boxes) may added. case, keep mind row, column cell numbering includes column row labels row column labels present. Let us illustrate adding borders (using rectGrob) simple table without row numbers. ’ll add two actually, give nice effect heavy line row column headers.  Note using rectGrob top, bottom, left right arguments (t, b, l, r) rows columns inside rectangle. repeat code almost exactly, don’t suppress column row labels, see column 1 now column row labels (doesn’t look good either, ’s point).  adding line segments separate rows columns using segmentsGrob, row column numbering scheme (includes row column labels). working line segments, keep mind default coordinate values segmentsGrob. x0 = 0, y0 = 0, x1 = 1, y1 = 1, npc, relative cell(s) modifying, lower left corner 0,0. clarity, show arguments examples. mind, add line across bottom single cell, use:  add line left side:  Perhaps ’d like cross cell. can done two diagonal lines combined via grobTree:  many cells decorate can use replicate create create segments. Just keep tableGrob numbering scheme mind.","code":"library(gtable) g <- tableGrob(iris[1:4, 1:3], rows = NULL) g <- gtable_add_grob(g,         grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),         t = 2, b = nrow(g), l = 1, r = ncol(g)) g <- gtable_add_grob(g,         grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),         t = 1, l = 1, r = ncol(g)) grid.draw(g) g <- tableGrob(iris[1:4, 1:3]) g <- gtable_add_grob(g,         grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),         t = 2, b = nrow(g), l = 1, r = ncol(g)) g <- gtable_add_grob(g,         grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),         t = 1, l = 1, r = ncol(g)) grid.draw(g) g <- tableGrob(iris[1:4, 1:3]) g <- gtable_add_grob(g,         grobs = segmentsGrob( # line across the bottom             x0 = unit(0,\"npc\"),             y0 = unit(0,\"npc\"),             x1 = unit(1,\"npc\"),             y1 = unit(0,\"npc\"),             gp = gpar(lwd = 2.0)),         t = 3, b = 3, l = 3, r = 3) grid.draw(g) g <- tableGrob(iris[1:4, 1:3]) g <- gtable_add_grob(g,         grobs = segmentsGrob( # line across the bottom       x0 = unit(0,\"npc\"),             y0 = unit(0,\"npc\"),             x1 = unit(0,\"npc\"),             y1 = unit(1,\"npc\"),             gp = gpar(lwd = 2.0)),         t = 3, b = 3, l = 3, r = 3) grid.draw(g) g <- tableGrob(iris[1:4, 1:3]) g <- gtable_add_grob(g,         grobs = grobTree(             segmentsGrob( # diagonal line ul -> lr                 x0 = unit(0,\"npc\"),                 y0 = unit(1,\"npc\"),                 x1 = unit(1,\"npc\"),                 y1 = unit(0,\"npc\"),                 gp = gpar(lwd = 2.0)),             segmentsGrob( # diagonal line ll -> ur                 x0 = unit(0,\"npc\"),                 y0 = unit(0,\"npc\"),                 x1 = unit(1,\"npc\"),                 y1 = unit(1,\"npc\"),                 gp = gpar(lwd = 2.0))),         t = 3, b = 3, l = 3, r = 3) grid.draw(g) g <- tableGrob(head(iris), theme = ttheme_minimal()) separators <- replicate(ncol(g) - 2,                      segmentsGrob(x1 = unit(0, \"npc\"), gp=gpar(lty=2)),                      simplify=FALSE) ## add vertical lines on the left side of columns (after 2nd) g <- gtable::gtable_add_grob(g, grobs = separators,                      t = 2, b = nrow(g), l = seq_len(ncol(g)-2)+2) grid.draw(g)"},{"path":"/articles/tableGrob.html","id":"accessing-existing-grobs-in-the-table","dir":"Articles","previous_headings":"Further gtable processing and integration","what":"Accessing existing grobs in the table","title":"Displaying tables as grid graphics","text":"may also access modify original content individual cells, e.g. highlight value.","code":"g <- tableGrob(iris[1:4, 1:3]) find_cell <- function(table, row, col, name=\"core-fg\"){   l <- table$layout   which(l$t==row & l$l==col & l$name==name) }  ind <- find_cell(g, 3, 2, \"core-fg\") ind2 <- find_cell(g, 2, 3, \"core-bg\") g$grobs[ind][[1]][[\"gp\"]] <- gpar(fontsize=15, fontface=\"bold\") g$grobs[ind2][[1]][[\"gp\"]] <- gpar(fill=\"darkolivegreen1\", col = \"darkolivegreen4\", lwd=5) grid.draw(g)"},{"path":"/articles/tableGrob.html","id":"faster-tables-an-alternative-grid-function","dir":"Articles","previous_headings":"","what":"Faster tables: an alternative grid function","title":"Displaying tables as grid graphics","text":"tableGrob function can slow; unfortunately price pay versatility easier implementation. use individual textGrob rectGrob elements cell, instead relying vectorised implementation functions. reason practical: much easier place, measure, customise individual grobs, modify graphical parameters positions single vectorised grob. alternative function presented , using vectorised approach, lacking many customisations tableGrob.","code":"grid.ftable <- function(d, padding = unit(4, \"mm\"), ...) {    nc <- ncol(d)   nr <- nrow(d)    ## character table with added row and column names   extended_matrix <- cbind(c(\"\", rownames(d)),                            rbind(colnames(d),                                  as.matrix(d)))    ## string width and height   w <- apply(extended_matrix, 2, strwidth, \"inch\")   h <- apply(extended_matrix, 2, strheight, \"inch\")    widths <- apply(w, 2, max)   heights <- apply(h, 1, max)    padding <- convertUnit(padding, unitTo = \"in\", valueOnly = TRUE)    x <- cumsum(widths + padding) - 0.5 * padding   y <- cumsum(heights + padding) - padding    rg <- rectGrob(x = unit(x - widths/2, \"in\"),                  y = unit(1, \"npc\") - unit(rep(y, each = nc + 1), \"in\"),                  width = unit(widths + padding, \"in\"),                  height = unit(heights + padding, \"in\"))    tg <- textGrob(c(t(extended_matrix)), x = unit(x - widths/2, \"in\"),                  y = unit(1, \"npc\") - unit(rep(y, each = nc + 1), \"in\"),                  just = \"center\")    g <- gTree(children = gList(rg, tg), ...,              x = x, y = y, widths = widths, heights = heights)    grid.draw(g)   invisible(g) }  grid.newpage() grid.ftable(head(iris, 4), gp = gpar(fill = rep(c(\"grey90\", \"grey95\"), each = 6)))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Baptiste Auguie. Author, maintainer. Anton Antonov. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Auguie B (2022). gridExtra: Miscellaneous Functions \"Grid\" Graphics. R package version 2.3, https://cindyfang70.github.io/gridExtra/.","code":"@Manual{,   title = {gridExtra: Miscellaneous Functions for \"Grid\" Graphics},   author = {Baptiste Auguie},   year = {2022},   note = {R package version 2.3},   url = {https://cindyfang70.github.io/gridExtra/}, }"},{"path":"/reference/arrangeGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange multiple grobs on a page — arrangeGrob","title":"Arrange multiple grobs on a page — arrangeGrob","text":"Set gtable layout place multiple grobs page.","code":""},{"path":"/reference/arrangeGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange multiple grobs on a page — arrangeGrob","text":"","code":"arrangeGrob(..., grobs = list(...), layout_matrix, vp = NULL,   name = \"arrange\", as.table = TRUE, respect = FALSE, clip = \"off\",   nrow = NULL, ncol = NULL, widths = NULL, heights = NULL, top = NULL,   bottom = NULL, left = NULL, right = NULL, padding = unit(0.5, \"line\"))  grid.arrange(..., newpage = TRUE)  marrangeGrob(grobs, ..., ncol, nrow, layout_matrix = matrix(seq_len(nrow *   ncol), nrow = nrow, ncol = ncol), top = quote(paste(\"page\", g, \"of\",   npages)))"},{"path":"/reference/arrangeGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange multiple grobs on a page — arrangeGrob","text":"... grobs, gtables, ggplot trellis objects grobs list grobs layout_matrix optional layout vp viewport name argument gtable .table logical: bottom-left top-right (TRUE) top-left bottom-right (FALSE) respect argument gtable clip argument gtable nrow argument gtable ncol argument gtable widths argument gtable heights argument gtable top optional string, grob bottom optional string, grob left optional string, grob right optional string, grob padding unit length one, margin around annotations newpage open new page","code":""},{"path":"/reference/arrangeGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange multiple grobs on a page — arrangeGrob","text":"arrangeGrob returns gtable. marrangeGrob returns list class arrangelist","code":""},{"path":"/reference/arrangeGrob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arrange multiple grobs on a page — arrangeGrob","text":"Using marrangeGrob, layout specifies nrow ncol, list grobs can split multiple pages. interactive devices print opens new windows, whilst non-interactive devices pdf call grid.newpage() drawings.","code":""},{"path":"/reference/arrangeGrob.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Arrange multiple grobs on a page — arrangeGrob","text":"arrangeGrob: return grob without drawing grid.arrange: draw current device marrangeGrob: interface arrangeGrob can dispatch multiple pages","code":""},{"path":"/reference/arrangeGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange multiple grobs on a page — arrangeGrob","text":"","code":"library(grid) grid.arrange(rectGrob(), rectGrob())  if (FALSE) {  library(ggplot2) pl <- lapply(1:11, function(.x) qplot(1:10, rnorm(10), main=paste(\"plot\", .x))) ml <- marrangeGrob(pl, nrow=2, ncol=2) ## non-interactive use, multipage pdf ggsave(\"multipage.pdf\", ml) ## interactive use; open new devices ml }"},{"path":"/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"rbind gtables — gtable_rbind","title":"rbind gtables — gtable_rbind","text":"rbind gtables cbind gtables","code":""},{"path":"/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rbind gtables — gtable_rbind","text":"","code":"gtable_rbind(..., size = \"max\", z = NULL)  gtable_cbind(..., size = \"max\", z = NULL)"},{"path":"/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rbind gtables — gtable_rbind","text":"... gtables size widths calculated? max maximum widths min minimum widths first widths/heights first gtable last widths/heights last gtable z optional z level","code":""},{"path":"/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine gtables based on row/column names. — gtable_combine","title":"Combine gtables based on row/column names. — gtable_combine","text":"Combine gtables based row/column names.","code":""},{"path":"/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine gtables based on row/column names. — gtable_combine","text":"","code":"gtable_combine(..., along = 1L, join = \"outer\")  combine(..., along = 1L, join = \"outer\")"},{"path":"/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine gtables based on row/column names. — gtable_combine","text":"... gtables along dimension align along, 1 = rows, 2 = cols. join x y different names, difference resolved?  inner keep names appear ,  outer keep names appear either,  left keep names x,  right keep names y.","code":""},{"path":"/reference/gridExtra-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous Functions for ","title":"Miscellaneous Functions for ","text":"Provides number user-level functions work \"grid\" graphics, notably arrange multiple grid-based plots page, draw tables.","code":""},{"path":"/reference/gridExtra-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Miscellaneous Functions for ","text":"R Graphics Paul Murrell (Chapman & Hall/CRC, August 2005)","code":""},{"path":[]},{"path":"/reference/gridExtra-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Miscellaneous Functions for ","text":"baptiste Auguie baptiste.auguie@gmail.com","code":""},{"path":"/reference/ngonGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular polygon grob — ngonGrob","title":"Regular polygon grob — ngonGrob","text":"Regular polygons optional rotation, stretching, aesthetic attributes.","code":""},{"path":"/reference/ngonGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular polygon grob — ngonGrob","text":"","code":"ngonGrob(x, y, n = 5, size = 5, phase = pi/2, angle = 0, ar = 1,   gp = gpar(colour = \"black\", fill = NA, linejoin = \"mitre\"), ...,   position.units = \"npc\", size.units = \"mm\")  grid.ngon(...)  ellipseGrob(x, y, size = 5, angle = pi/4, ar = 1, n = 50,   gp = gpar(colour = \"black\", fill = NA, linejoin = \"mitre\"), ...,   position.units = \"npc\", size.units = \"mm\")  grid.ellipse(...)  polygon_regular(n = 5, phase = 0)"},{"path":"/reference/ngonGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regular polygon grob — ngonGrob","text":"x x unit y y unit n number vertices size radius circumscribing circle phase angle radians first point relative x axis angle angle polygon radians ar aspect ratio gp gpar ... parameters passed polygonGrob position.units default units positions size.units grid units sizes","code":""},{"path":"/reference/ngonGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regular polygon grob — ngonGrob","text":"grob.","code":""},{"path":"/reference/ngonGrob.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Regular polygon grob — ngonGrob","text":"ngonGrob: return polygon grob grid.ngon: draw polygon grob current device ellipseGrob: return ellipse grob grid.ellipse: draw ellipse grob polygon_regular: return x,y coordinates regular polygon inscribed unit circle","code":""},{"path":"/reference/ngonGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regular polygon grob — ngonGrob","text":"","code":"library(grid) N <- 5 xy <- polygon_regular(N)*2  # draw multiple polygons g <- ngonGrob(unit(xy[,1],\"cm\") + unit(0.5,\"npc\"),                unit(xy[,2],\"cm\") + unit(0.5,\"npc\"),               n = seq_len(N) + 2, gp = gpar(fill=1:N))  grid.newpage() grid.draw(g)   # rotated and stretched g2 <- ngonGrob(unit(xy[,1],\"cm\") + unit(0.5,\"npc\"),                unit(xy[,2],\"cm\") + unit(0.5,\"npc\"),               n = seq_len(N) + 2, ar = seq_len(N),               phase = 0, angle = pi/(seq_len(N) + 2),               size = 1:N + 5)  grid.newpage() grid.draw(g2)   # ellipse g3 <- ellipseGrob(unit(xy[,1],\"cm\") + unit(0.5,\"npc\"),                    unit(xy[,2],\"cm\") + unit(0.5,\"npc\"),                   angle = -2*seq(0,N-1)*pi/5 + pi/2,                   size = 5, ar = 1/3)  grid.newpage() grid.draw(g3)"},{"path":"/reference/tableGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical display of a textual table — tableGrob","title":"Graphical display of a textual table — tableGrob","text":"Create gtable containing text grobs representing character matrix.","code":""},{"path":"/reference/tableGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphical display of a textual table — tableGrob","text":"","code":"tableGrob(d, rows = rownames(d), cols = colnames(d),   theme = ttheme_default(), vp = NULL, ...)  grid.table(...)  ttheme_default(base_size = 12, base_colour = \"black\", base_family = \"\",   parse = FALSE, padding = unit(c(4, 4), \"mm\"), ...)  ttheme_minimal(base_size = 12, base_colour = \"black\", base_family = \"\",   parse = FALSE, padding = unit(c(4, 4), \"mm\"), ...)"},{"path":"/reference/tableGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphical display of a textual table — tableGrob","text":"d data.frame matrix rows optional vector specify row names cols optional vector specify column names theme list theme parameters vp optional viewport ... arguments control gtable base_size default font size base_colour default font colour base_family default font family parse logical, default behaviour parsing text plotmath padding length-2 unit vector specifying horizontal vertical padding text within cell","code":""},{"path":"/reference/tableGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphical display of a textual table — tableGrob","text":"gtable.","code":""},{"path":"/reference/tableGrob.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Graphical display of a textual table — tableGrob","text":"tableGrob: return grob grid.table: draw text table ttheme_default: default theme text tables ttheme_minimal: minimalist theme text tables","code":""},{"path":"/reference/tableGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphical display of a textual table — tableGrob","text":"","code":"library(grid) d <- head(iris, 3) g <- tableGrob(d) grid.newpage() grid.draw(g)"}]
